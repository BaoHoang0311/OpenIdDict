
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using SeverIDDictAPI.Data;
using System.Security.Cryptography;

namespace SeverIDDictAPI
{
    public class RsaKeyService1
    {
        public RsaSecurityKey SigningKey { get; }
        public RsaSecurityKey EncryptionKey { get; }

        public RsaKeyService1()
        {
            using var rsa = RSA.Create(2048);

            SigningKey = new RsaSecurityKey(rsa.ExportParameters(true))
            {
                KeyId = Guid.NewGuid().ToString()
            };

            EncryptionKey = new RsaSecurityKey(rsa.ExportParameters(true))
            {
                KeyId = Guid.NewGuid().ToString()
            };
        }
    }
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.

            builder.Services.AddControllers();
            // Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi
            builder.Services.AddDbContext<ApplicationDbContext>(option =>
            {
                option.UseSqlServer(builder.Configuration.GetConnectionString("SqlConnectionStr"));
                // Add Openiddict
                option.UseOpenIddict();
            });
            // t·∫£i nuget .net core identity b√¨nh th∆∞·ªùng
            // xong ch·∫°y l√™nh dotnet ef migrations add Init
            // dotnet ef database update l√† xong c√≥ db c·ªßa Identity
            builder.Services.AddOpenApi();

            builder.Services.AddIdentity<IdentityUser, IdentityRole>(options =>
            {
                // Thi·∫øt l·∫≠p v·ªÅ Password
                options.Password.RequireDigit = false; // Kh√¥ng b·∫Øt ph·∫£i c√≥ s·ªë
                options.Password.RequireLowercase = false; // Kh√¥ng b·∫Øt ph·∫£i c√≥ ch·ªØ th∆∞·ªùng
                options.Password.RequireNonAlphanumeric = false; // Kh√¥ng b·∫Øt k√Ω t·ª± ƒë·∫∑c bi·ªát
                options.Password.RequireUppercase = false; // Kh√¥ng b·∫Øt bu·ªôc ch·ªØ in
                options.Password.RequiredLength = 0; // S·ªë k√Ω t·ª± t·ªëi thi·ªÉu c·ªßa password
                options.Password.RequiredUniqueChars = 0; // S·ªë k√Ω t·ª± ri√™ng bi·ªát
                options.User.AllowedUserNameCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@ -_.";
                // // C·∫•u h√¨nh Lockout - kh√≥a user
                options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(1); // Kh√≥a 1 ph√∫t
                options.Lockout.MaxFailedAccessAttempts = 2; // Th·∫•t b·∫°i 2 l·∫ß th√¨ kh√≥a
                //options.Lockout.AllowedForNewUsers = true;

                // // C·∫•u h√¨nh v·ªÅ User.
                options.User.RequireUniqueEmail = true; // Email l√† duy nh·∫•t , UserName l√† duy nh·∫•t th√¨ setting strong dbContext
                                                        // // C·∫•u h√¨nh ƒëƒÉng nh·∫≠p.
                options.SignIn.RequireConfirmedEmail = true;            // C·∫•u h√¨nh x√°c th·ª±c ƒë·ªãa ch·ªâ email (email ph·∫£i t·ªìn t·∫°i)
                                                                        // options.Tokens.AuthenticatorTokenProvider = TokenOptions.DefaultAuthenticatorProvider;
                                                                        // options.SignIn.RequireConfirmedPhoneNumber = false;     // X√°c th·ª±c s·ªë ƒëi·ªán tho·∫°i
            })
            .AddEntityFrameworkStores<ApplicationDbContext>()
            .AddDefaultTokenProviders();

            builder.Services.AddControllersWithViews();




            var rsaKeyService1 = new RsaKeyService1();
            builder.Services.AddSingleton(rsaKeyService1);

            //Cionfigure OpenIddict 
            // sau ch·∫°y dotnet ef migrations add OpenIDDict l√† c√≥ 4 b·∫£ng tbo
            builder.Services.AddOpenIddict()
                           .AddCore(coreOptions =>
                           {
                               coreOptions.UseEntityFrameworkCore()
                                  .UseDbContext<ApplicationDbContext>();
                           })
            .AddServer(options =>
            {
                options.SetIssuer(new Uri("https://localhost:7293/"));
                options.SetTokenEndpointUris("connect/token");
                options.SetAuthorizationEndpointUris("/connect/authorize");
                options.SetIntrospectionEndpointUris("token/introspect");

                options.AllowClientCredentialsFlow().AllowRefreshTokenFlow();
                options.AllowPasswordFlow().AllowRefreshTokenFlow();
                options.AllowAuthorizationCodeFlow();

                options.SetAccessTokenLifetime(TimeSpan.FromMinutes(20));

                // Encryption and signing of tokens
                options
                    .AddSigningKey(rsaKeyService1.SigningKey)
                    .AddEncryptionKey(rsaKeyService1.EncryptionKey) // üëà Gi·∫£i quy·∫øt l·ªói
                    .DisableAccessTokenEncryption(); // üëà t·∫Øt m√£ h√≥a access token (n·∫øu mu·ªën)
                                                     // ‚úÖ Add real certificates


                // t·∫Øt m√£ h√≥a access token n·∫øu b·∫°n d√πng JWT
                options.UseAspNetCore()
                .EnableTokenEndpointPassthrough()
                .EnableAuthorizationEndpointPassthrough();
            });

            builder.Services.AddHostedService<Worker>();

            // D√πng Microsoft.AspNetCore.Identity.EntityFrameworkCore n√™n ko custom ƒë∆∞·ª£c cookie ".Application" ... ph·∫£i d√πng default
            builder.Services.ConfigureApplicationCookie(options =>
            {
                options.LoginPath = "/Home/Login"; // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn /Home/Login khi ch∆∞a ƒëƒÉng nh·∫≠p
            });

            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (app.Environment.IsDevelopment())
            {
                app.MapOpenApi();
            }
            app.UseStaticFiles();
            app.UseHttpsRedirection();

            app.UseAuthentication();
            app.UseAuthorization();

            //app.MapControllers();

            app.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");


            app.Run();
        }
    }
}
